#!/usr/bin/perl

use v5.22;
use warnings;
use strict;

use Text::CSV;
use Text::Fuzzy;

my $maxfuzz = 12;

# trim extra whitespace in string inefficiently
sub trim { my $s = shift; $s =~ s/^\s+|\s+$//g; return $s };


# read roster file
my $roster = shift;
my $rcsv = Text::CSV->new({binary => 1});
open(my $rh, "<:encoding(utf8)", $roster) or die "unable to open roster file";
my $rheader = $rcsv->getline( $rh );

# read results file
my $exam = shift;
my $xcsv = Text::CSV->new({binary => 1});
open(my $xh, "<:encoding(utf8)", $exam) or die "unable to open exam file";
my $xheader = $xcsv->getline( $xh );

# Parse roster into an array of arrays (@roster)
# Create a hash that connects student id to roster row
# assumes that student id is third column
my @roster = ();
my %roster_id = ();
while( my $row = $rcsv->getline( $rh ) ) {
	my $id = $row->[2]; # third column
	push(@roster, $row);
	$roster_id{$id} = @roster - 1;
}

# Parse Exam results into an array of arrays (@results)
# Use a hash (%result_id) to store how many times each id is seen
# assumes id is first row
my @results = ();
my %result_id = ();
while( my $row = $xcsv->getline( $xh ) ) {
	my @s = map { trim($_) } @$row;
	$result_id{$s[0]} += 1;
	push(@results, [@s]);
}
close($rh);
close($xh);

# Merge
my @output1 = ();
my @unknowns = ();

# Round one, exact match
for my $i (0..$#results) {
	my @s = @{$results[$i]};
	my $id = $s[0];
	if(defined $roster_id{$id} && $result_id{$id} == 1) {
		unshift(@s, @{$roster[$roster_id{$id}]});
		push(@output1, [@s]);
		delete $roster_id{$id};
	} else {
		push(@unknowns, $i);
	}
}

@output1 = sort {$a->[0] cmp $b->[0] || $a->[1] cmp $b->[1] || $a->[2] <=> $b->[2] } @output1; 

my @output2 = ();
my @output3 = ();
my @words = ();
my @lines = ();
while ( my ($k,$v) = each %roster_id ) {
	my @s = @{$roster[$v]};
	push(@lines, $v);
	my $fn = substr($s[1], 0,6);
	my $w = "$s[2],$s[0],$fn";
	$w = uc($w);
	push(@words, $w);
}
foreach my $u (@unknowns) {
	my @s = @{$results[$u]};
	my $w = "$s[0],$s[1],$s[2]";
	$w = uc($w);
	my $tf = Text::Fuzzy->new($w,max => $maxfuzz);
	my $nearest = $tf->nearest (\@words);
	if(defined $nearest) {
		my $l = $lines[$nearest];
		my @z = (@{$roster[$l]}, @s);
		push(@output2, [@z]);
	} else {
		my @z = (('') x 7, @s);
		push(@output3, [@z]);
	}
}

@output2 = sort {$a->[0] cmp $b->[0] || $a->[1] cmp $b->[1] || $a->[2] <=> $b->[2] } @output2; 

my @header = (@$rheader,map {"x$_"} @$xheader);

say(join(",", map {"\"$_\""} @{header}));


foreach(@output3) {
	my @s = @{$_};
	my $last = pop(@s);
	say(join(",", (map {"\"$_\""} @s), $last));
}
say("");

foreach(@output2) {
	my @s = @{$_};
	my $last = pop(@s);
	say(join(",", (map {"\"$_\""} @s), $last));
}
say("");

foreach(@output1) {
	my @s = @{$_};
	my $last = pop(@s);
	say(join(",", (map {"\"$_\""} @s), $last));
}
